
package App;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "CalculatorPortType", targetNamespace = "http://App/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface CalculatorPortType {


    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns java.lang.Integer
     */
    @WebMethod(action = "urn:divide")
    @WebResult(targetNamespace = "http://App/xsd")
    @RequestWrapper(localName = "divide", targetNamespace = "http://App/xsd", className = "App.Divide")
    @ResponseWrapper(localName = "divideResponse", targetNamespace = "http://App/xsd", className = "App.DivideResponse")
    public Integer divide(
        @WebParam(name = "a", targetNamespace = "http://App/xsd")
        Integer a,
        @WebParam(name = "b", targetNamespace = "http://App/xsd")
        Integer b);

    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns java.lang.Integer
     */
    @WebMethod(action = "urn:multiply")
    @WebResult(targetNamespace = "http://App/xsd")
    @RequestWrapper(localName = "multiply", targetNamespace = "http://App/xsd", className = "App.Multiply")
    @ResponseWrapper(localName = "multiplyResponse", targetNamespace = "http://App/xsd", className = "App.MultiplyResponse")
    public Integer multiply(
        @WebParam(name = "a", targetNamespace = "http://App/xsd")
        Integer a,
        @WebParam(name = "b", targetNamespace = "http://App/xsd")
        Integer b);

    /**
     * 
     * @param exp
     * @param base
     * @return
     *     returns java.lang.Double
     */
    @WebMethod(action = "urn:exponentation")
    @WebResult(targetNamespace = "http://App/xsd")
    @RequestWrapper(localName = "exponentation", targetNamespace = "http://App/xsd", className = "App.Exponentation")
    @ResponseWrapper(localName = "exponentationResponse", targetNamespace = "http://App/xsd", className = "App.ExponentationResponse")
    public Double exponentation(
        @WebParam(name = "base", targetNamespace = "http://App/xsd")
        Integer base,
        @WebParam(name = "exp", targetNamespace = "http://App/xsd")
        Integer exp);

    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns java.lang.Integer
     */
    @WebMethod(action = "urn:add")
    @WebResult(targetNamespace = "http://App/xsd")
    @RequestWrapper(localName = "add", targetNamespace = "http://App/xsd", className = "App.Add")
    @ResponseWrapper(localName = "addResponse", targetNamespace = "http://App/xsd", className = "App.AddResponse")
    public Integer add(
        @WebParam(name = "a", targetNamespace = "http://App/xsd")
        Integer a,
        @WebParam(name = "b", targetNamespace = "http://App/xsd")
        Integer b);

    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns java.lang.Float
     */
    @WebMethod(action = "urn:module")
    @WebResult(targetNamespace = "http://App/xsd")
    @RequestWrapper(localName = "module", targetNamespace = "http://App/xsd", className = "App.Module")
    @ResponseWrapper(localName = "moduleResponse", targetNamespace = "http://App/xsd", className = "App.ModuleResponse")
    public Float module(
        @WebParam(name = "a", targetNamespace = "http://App/xsd")
        Float a,
        @WebParam(name = "b", targetNamespace = "http://App/xsd")
        Float b);

    /**
     * 
     * @param a
     * @return
     *     returns java.lang.Integer
     */
    @WebMethod(action = "urn:factorial")
    @WebResult(targetNamespace = "http://App/xsd")
    @RequestWrapper(localName = "factorial", targetNamespace = "http://App/xsd", className = "App.Factorial")
    @ResponseWrapper(localName = "factorialResponse", targetNamespace = "http://App/xsd", className = "App.FactorialResponse")
    public Integer factorial(
        @WebParam(name = "a", targetNamespace = "http://App/xsd")
        Integer a);

    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns java.lang.Integer
     */
    @WebMethod(action = "urn:subtract")
    @WebResult(targetNamespace = "http://App/xsd")
    @RequestWrapper(localName = "subtract", targetNamespace = "http://App/xsd", className = "App.Subtract")
    @ResponseWrapper(localName = "subtractResponse", targetNamespace = "http://App/xsd", className = "App.SubtractResponse")
    public Integer subtract(
        @WebParam(name = "a", targetNamespace = "http://App/xsd")
        Integer a,
        @WebParam(name = "b", targetNamespace = "http://App/xsd")
        Integer b);

}
